namespace SehensWerte.Filters
{
    public class IIRFilter_BpBe4_0_005_0_01 : Filter
    {
        // Generated by Fiview 0.9.10 <http://uazu.net/fiview/>.  
        // All generated example code below is in the public domain.
        // Filter 1
        // File: -i #1
        // Guessed type: band-pass
        //
        // Frequency-response:
        //   Peak gain: 1
        //   Guessed 100% gain: 1
        //   Regions between half-power points (70.71% response or -3.01dB):
        //     0.00499995 -> 0.1  (width 0.095, midpoint 0.0525)
        //   Regions between quarter-power points (50% response or -6.02dB):
        //     0.00374419 -> 0.130315  (width 0.12657, midpoint 0.0670293)
        //
        // Time-response:
        //   50% complete after 14 samples
        //   90% complete after 118 samples
        //   95% complete after 202 samples
        //   99% complete after 320 samples
        //   99.9% complete after 504 samples
        //   99.99% complete after 691 samples
        //   Impulse response max deviation is at 3 samples
        //   Impulse response ranges between -0.0698908 and 0.235725
        //
        // Original filter:
        //   x 0.0124629030681069
        //   / 1 -0.811861386872705 0.348560872096402
        //   x 1 -2 1
        //   / 1 -1.97510966218631 0.975523983114894
        //   x 1 -2 1
        //   / 1 -0.808143999794234 0.180081736339935
        //   x 1 2 1
        //   / 1 -1.95544362702653 0.955988372814104
        //   x 1 2 1 (BpBe4/=0.005-0.1)
        //
        // Filter descriptions:
        //   BpBe4/=0.005-0.1 == Bandpass Bessel filter, order 4, -3.01dB frequencies
        //     0.005-0.1
        //

        private double[] buf = new double[8];

        public override double Insert(double val)
        {
            // fiview.exe -i BpBe4/=0.005-0.1
            double tmp, fir, iir;
            tmp = buf[0];
            System.Buffer.BlockCopy(buf, sizeof(double), buf, 0, (buf.Length - 1) * sizeof(double));
            // use 0.01246290306820318 below for unity gain at 100% level
            val *= 0.01246290306810692;
            iir = val + 0.8118613868727053 * buf[0] - 0.3485608720964022 * tmp;
            fir = iir - buf[0] - buf[0] + tmp;
            tmp = buf[1]; buf[1] = iir; val = fir;
            iir = val + 1.975109662186309 * buf[2] - 0.9755239831148942 * tmp;
            fir = iir - buf[2] - buf[2] + tmp;
            tmp = buf[3]; buf[3] = iir; val = fir;
            iir = val + 0.8081439997942344 * buf[4] - 0.180081736339935 * tmp;
            fir = iir + buf[4] + buf[4] + tmp;
            tmp = buf[5]; buf[5] = iir; val = fir;
            iir = val + 1.955443627026533 * buf[6] - 0.9559883728141037 * tmp;
            fir = iir + buf[6] + buf[6] + tmp;
            buf[7] = iir; val = fir;
            return val;
        }
    }
}
